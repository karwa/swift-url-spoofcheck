// Copyright The swift-url Contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import XCTest
import WebURL
@testable import WebURLSpoofCheck

final class SpoofCheckedRendererTests: XCTestCase {

    func testBasic() throws {

      let domains: [(input: String, unchecked: String, checked: String)] = [

        ("example.com", "example.com", "example.com"),
        ("ä½ å¥½ä½ å¥½", "ä½ å¥½ä½ å¥½", "ä½ å¥½ä½ å¥½"),
        ("a.Ø£Ù‡Ù„Ø§.com", "a.Ø£Ù‡Ù„Ø§.com", "a.Ø£Ù‡Ù„Ø§.com"),

        // Emoji are not allowed :( Yes, Chrome really blocks them.
        ("ðŸ˜€.com", "ðŸ˜€.com", "xn--e28h.com"),
        ("â˜ƒ", "â˜ƒ", "xn--n3h"),

        // Some basic spoofs.
        ("Ñ€Ð°Î³pal.com", "Ñ€Ð°Î³pal.com", "xn--pal-vxc83d5c.com"),
        ("Ð°pple.com", "Ð°pple.com", "xn--pple-43d.com"),

        // Deviation characters. We allow them, Chrome doesn't.
        ("faÃŸ.ExAmPlE", "faÃŸ.example", "faÃŸ.example"),

        // Allowed for Icelandic TLD only.
        ("some-hosÃ¾ital.com", "some-hosÃ¾ital.com", "xn--some-hosital-bmb.com"),
        ("some-hosÃ¾ital.is", "some-hosÃ¾ital.is", "some-hosÃ¾ital.is"),
        // Allowed for Azerbaijani TLD only.
        ("É™pple.com", "É™pple.com", "xn--pple-u6b.com"),
        ("É™pple.az", "É™pple.az", "É™pple.az"),
        // Middle dots. Only allowed between two 'l's, and only for Catalan TLD.
        ("exampleÂ·com", "exampleÂ·com", "xn--examplecom-rra"),
        ("exampleÂ·com.cat", "exampleÂ·com.cat", "xn--examplecom-rra.cat"),
        ("Â·example.cat", "Â·example.cat", "xn--example-uma.cat"),
        ("exampleÂ·.cat", "exampleÂ·.cat", "xn--example-1ma.cat"),
        ("pelÂ·Â·lÃ­cula.cat", "pelÂ·Â·lÃ­cula.cat", "xn--pellcula-ioaa90d.cat"),
        ("peÂ·lÂ·lÃ­cula.cat", "peÂ·lÂ·lÃ­cula.cat", "xn--pellcula-hoab90d.cat"),
        ("pelÂ·lÂ·Ã­cula.cat", "pelÂ·lÂ·Ã­cula.cat", "xn--pellcula-ioab80d.cat"),

        ("pelÂ·lÃ­cula.cat", "pelÂ·lÃ­cula.cat", "pelÂ·lÃ­cula.cat"),
        ("pelÂ·lÃ­cula.com", "pelÂ·lÃ­cula.com", "xn--pellcula-ioa55c.com"),

        // Digit lookalike.
        ("xn--16-1ik.com", "16áƒ™.com", "xn--16-1ik.com"),
      ]

      for (input, expectedUnchecked, expectedChecked) in domains {
        let domain = WebURL.Domain(input)!

        let actualUnchecked = domain.render(.uncheckedUnicodeString)
        let actualChecked = domain.render(.checkedUnicodeString)
        XCTAssertEqual(actualUnchecked, expectedUnchecked)
        XCTAssertEqual(actualChecked, expectedChecked)

        print("================")
        print("ASCII: \(domain)")
        print("Unchecked: \(actualUnchecked)")
        print("Checked: \(actualChecked)")
        print("================")
      }
    }
}
